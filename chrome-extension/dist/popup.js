var r=Object.defineProperty;var l=(a,t,n)=>t in a?r(a,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):a[t]=n;var i=(a,t,n)=>l(a,typeof t!="symbol"?t+"":t,n);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))o(e);new MutationObserver(e=>{for(const s of e)if(s.type==="childList")for(const c of s.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&o(c)}).observe(document,{childList:!0,subtree:!0});function n(e){const s={};return e.integrity&&(s.integrity=e.integrity),e.referrerPolicy&&(s.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?s.credentials="include":e.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function o(e){if(e.ep)return;e.ep=!0;const s=n(e);fetch(e.href,s)}})();class d{constructor(){i(this,"state",{active:!1,autoTranscribe:!0,showOverlay:!0});this.init()}async init(){await this.loadState(),this.setupEventListeners(),this.updateUI()}async loadState(){const t=await chrome.storage.sync.get(["extensionState"]);t.extensionState&&(this.state={...this.state,...t.extensionState})}async saveState(){await chrome.storage.sync.set({extensionState:this.state})}setupEventListeners(){const t=document.getElementById("toggleButton"),n=document.getElementById("testConnection"),o=document.getElementById("autoTranscribe"),e=document.getElementById("showOverlay");t.addEventListener("click",()=>this.toggleExtension()),n.addEventListener("click",()=>this.testConnection()),o.addEventListener("change",s=>{this.state.autoTranscribe=s.target.checked,this.saveState()}),e.addEventListener("change",s=>{this.state.showOverlay=s.target.checked,this.saveState()})}async toggleExtension(){this.state.active=!this.state.active,await this.saveState();try{const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});t.id&&chrome.tabs.sendMessage(t.id,{action:"toggleExtension",state:this.state}).catch(n=>{console.log("Could not send message to content script:",n)})}catch(t){console.log("Extension toggle error:",t)}this.updateUI()}async testConnection(){const t=document.getElementById("testConnection");t.disabled=!0,t.textContent="Testing...";try{const n=new AbortController,o=setTimeout(()=>n.abort(),5e3),e=await fetch("http://localhost:8000/health",{signal:n.signal});if(clearTimeout(o),e.ok)t.textContent="✅ Connected",t.style.background="#059669";else throw new Error("Backend not responding")}catch(n){console.log("Connection test failed:",n),t.textContent="❌ Failed",t.style.background="#dc2626"}setTimeout(()=>{t.disabled=!1,t.textContent="Test Backend Connection",t.style.background="#3b82f6"},2e3)}updateUI(){const t=document.getElementById("status"),n=document.getElementById("toggleButton"),o=document.getElementById("autoTranscribe"),e=document.getElementById("showOverlay");this.state.active?(t.textContent="Extension Active",t.className="status active",n.textContent="Deactivate Extension"):(t.textContent="Extension Inactive",t.className="status inactive",n.textContent="Activate Extension"),o.checked=this.state.autoTranscribe,e.checked=this.state.showOverlay}}document.addEventListener("DOMContentLoaded",()=>{new d});
